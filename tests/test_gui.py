import re
import json
import pytest
from playwright.sync_api import Page, expect

# Constants
GERMAN_DATE_REGEX = re.compile(r"\w+ \d{1,2}\.\d{1,2}\.\d{4}")


@pytest.fixture(scope="session")
def sample_data():
    """Loads sample data from the generated JSON file.

    This fixture provides the test functions with a consistent set of sample
    data, which is generated by a separate script before the tests are run.

    Returns:
        dict: The parsed JSON object containing sample data.
    """
    with open("build/tests/sample-data.json", "r") as f:
        return json.load(f)


@pytest.fixture
def page(page: Page, live_server):
    """Navigates the Playwright page to the live server URL.

    This fixture ensures that each test function starts with a fresh page
    loaded from the root of the WellTrack application.

    Args:
        page (Page): The Playwright Page object.
        live_server (str): The base URL of the live server from the `live_server` fixture.

    Returns:
        Page: The configured and navigated Playwright Page object.
    """
    page.goto(f"{live_server}/welltrack/welltrack.html", wait_until="networkidle")
    return page


def test_start_with_no_data(page: Page):
    """Tests the application's initial state with no data in localStorage.

    This test verifies that when the application is launched for the first
    time (or after clearing data), it displays the correct "Today" view with
    a "no entries" message.

    Args:
        page (Page): The Playwright Page object.
    """
    page.evaluate("() => localStorage.clear()")
    page.reload()

    # Check for "Heute" (Today) and the current date format.
    expect(page.locator("h2:has-text('Heute')")).to_be_visible()
    expect(page.locator("h2:has-text('Heute') + span")).to_have_text(GERMAN_DATE_REGEX)
    expect(page.get_by_text("Noch keine Eintr채ge f체r Heute")).to_be_visible()


def test_start_with_empty_data(page: Page):
    """Tests the application's initial state with empty data structures.

    This test ensures that the application handles the case where localStorage
    contains empty arrays and objects, which might occur after certain user
    actions, without crashing.

    Args:
        page (Page): The Playwright Page object.
    """
    page.evaluate(
        "() => { \
        localStorage.setItem('wellTrackMetrics', '[]'); \
        localStorage.setItem('wellTrackEventTypes', '[]'); \
        localStorage.setItem('wellTrackSettings', '{}'); \
    }"
    )
    page.reload()

    # Check for "Heute" (Today) and the current date format.
    expect(page.locator("h2:has-text('Heute')")).to_be_visible()
    expect(page.locator("h2:has-text('Heute') + span")).to_have_text(GERMAN_DATE_REGEX)
    expect(page.get_by_text("Noch keine Eintr채ge f체r Heute")).to_be_visible()


def test_start_with_sample_data(page: Page, sample_data):
    """Tests the application's state after loading sample data.

    This test injects a known set of sample data into localStorage and
    verifies that the application correctly loads and displays this data.

    Args:
        page (Page): The Playwright Page object.
        sample_data (dict): The sample data loaded from the fixture.
    """
    page.evaluate(
        f"() => {{ \
        localStorage.setItem('wellTrackMetrics', JSON.stringify({json.dumps(sample_data['metrics'])})); \
        localStorage.setItem('wellTrackEventTypes', JSON.stringify({json.dumps(sample_data['eventTypes'])})); \
        localStorage.setItem('wellTrackSettings', JSON.stringify({json.dumps(sample_data['settings'])})); \
    }}"
    )
    page.reload()

    # Navigate to the log page to see all entries
    page.locator("#nav-log").click()

    # Check for a known entry from the sample data
    expect(page.locator("text=Kaffee Tassen").first).to_be_visible()


def test_settings_persistence(page: Page):
    """Tests that changing a setting persists after a page reload.

    This test modifies a setting (the default pain view), reloads the page,
    and then verifies both directly in localStorage and through the UI that
    the change was correctly saved and applied.

    Args:
        page (Page): The Playwright Page object.
    """
    # Navigate to the pain page to check the default view
    page.locator("#nav-pain").click()
    expect(page.locator("#body-back")).to_be_visible()
    expect(page.locator("#body-front")).to_be_hidden()

    # Change the default pain view setting to 'front'
    page.locator("#btn-view-front").click()
    expect(page.locator("#body-front")).to_be_visible()
    expect(page.locator("#body-back")).to_be_hidden()

    # Reload the page and verify the setting has persisted
    page.reload()

    # Verify the setting in localStorage directly
    settings_json = page.evaluate("() => localStorage.getItem('wellTrackSettings')")
    settings = json.loads(settings_json)
    assert settings.get("painView") == "front"

    # Verify the UI reflects the persisted setting
    page.locator("#nav-pain").click()
    expect(page.locator("#body-front")).to_be_visible()
    expect(page.locator("#body-back")).to_be_hidden()


def test_main_navigation(page: Page, sample_data):
    """Tests clicking through all main navigation icons.

    This test iterates through all the main navigation buttons in the header,
    clicks each one, and verifies that the correct page title appears, ensuring
    that all main pages are accessible.

    Args:
        page (Page): The Playwright Page object.
        sample_data (dict): The sample data to populate the app.
    """
    page.evaluate(
        f"() => {{ \
        localStorage.setItem('wellTrackMetrics', JSON.stringify({json.dumps(sample_data['metrics'])})); \
        localStorage.setItem('wellTrackEventTypes', JSON.stringify({json.dumps(sample_data['eventTypes'])})); \
        localStorage.setItem('wellTrackSettings', JSON.stringify({json.dumps(sample_data['settings'])})); \
    }}"
    )
    page.reload()

    nav_items = {
        "event": "Ereignisse",
        "mood": "Stimmung",
        "pain": "Schmerzen",
        "history": "Verlauf",
        "log": "Protokoll",
        "settings": "Einstellungen",
        "today": "Heute",
    }

    for nav_id, title in nav_items.items():
        page.locator(f"#nav-{nav_id}").click()
        expect(page.locator(f"h2:has-text('{title}')")).to_be_visible()
